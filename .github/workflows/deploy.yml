name: Deploy to AWS EC2

on:
  push:
    branches:
      - main  # Set this to the branch you want to deploy from

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Debug Auto Scaling Instances
      run: |
        aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[*].[InstanceId,AutoScalingGroupName]' --output table

    - name: Get Instance ID
      id: get_instance_id
      run: |
        INSTANCE_ID=$(aws autoscaling describe-auto-scaling-instances --query 'AutoScalingInstances[?AutoScalingGroupName==`TLMRIS-AUTO-SCALING-GROUP-SPOT`].InstanceId' --output text)
        echo "INSTANCE_ID=$INSTANCE_ID"
        echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

    - name: Print Instance ID for Debugging
      run: echo ${{ env.INSTANCE_ID }}

    - name: Get Instance Public IP
      id: get_instance_ip
      run: |
        INSTANCE_IP=$(aws ec2 describe-instances --instance-ids ${{ env.INSTANCE_ID }} --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "INSTANCE_IP=$INSTANCE_IP"
        echo "INSTANCE_IP=$INSTANCE_IP" >> $GITHUB_ENV

    - name: Print Instance Public IP for Debugging
      run: echo ${{ env.INSTANCE_IP }}

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.INSTANCE_IP }} >> ~/.ssh/known_hosts

    - name: Replace placeholders with double quotes and create JSON file
      run: |
        echo "${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}" | sed 's/'\''/"/g' > service-account-file.json

    - name: Base64 encode the service account JSON
      run: |
        cat service-account-file.json | base64 > service-account-file.json.base64
        cat service-account-file.json.base64 # Print the base64 encoded string for debugging

    - name: Transfer the base64 encoded JSON to EC2
      run: |
        scp service-account-file.json.base64 ec2-user@${{ env.INSTANCE_IP }}:/home/ec2-user/service-account-file.json.base64

    - name: Decode the base64 JSON on EC2
      run: |
        ssh ec2-user@${{ env.INSTANCE_IP }} "base64 -d /home/ec2-user/service-account-file.json.base64 > /home/ec2-user/service-account-file.json"
        ssh ec2-user@${{ env.INSTANCE_IP }} "cat /home/ec2-user/service-account-file.json" # Verify the decoded JSON content

    # - name: Deploy to EC2
    #   run: |
    #     ssh ec2-user@${{ env.INSTANCE_IP }} "mkdir -p /home/ec2-user/r6-dissect-TL-Fork"
    #     rsync -avz --exclude '.git' --exclude 'node_modules' ./ ec2-user@${{ env.INSTANCE_IP }}:/home/ec2-user/r6-dissect-TL-Fork
    #     ssh ec2-user@${{ env.INSTANCE_IP }} "sudo mkdir -p /etc/TLMRIS && cd /etc/TLMRIS && sudo find . -maxdepth 1 ! -name 'data' ! -name '.' -exec rm -rf {} +"
    #     ssh ec2-user@${{ env.INSTANCE_IP }} "sudo mv /home/ec2-user/r6-dissect-TL-Fork/* /etc/TLMRIS"
    #     ssh ec2-user@${{ env.INSTANCE_IP }} "sudo mv /home/ec2-user/service-account-file.json /etc/TLMRIS/sheets-export-runner/service-account-file.json"
    #     ssh ec2-user@${{ env.INSTANCE_IP }} "cd /etc/TLMRIS/scripts && pwd && sudo bash build.sh"

    - name: Create AMI from Instance
      id: create_ami
      run: |
        echo "Creating AMI from instance ID: ${{ env.INSTANCE_ID }}"
        AMI_ID=$(aws ec2 create-image --instance-id ${{ env.INSTANCE_ID }} --name "my-app-ami-$(date +%Y%m%d%H%M%S)" --no-reboot --query 'ImageId' --output text)
        echo "AMI_ID=$AMI_ID"
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

    - name: Wait for AMI to become available
      run: |
        aws ec2 wait image-available --image-ids ${{ env.AMI_ID }}

    - name: Update Auto Scaling Group with new AMI
      run: |
        LAUNCH_TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=launch-template-name,Values=TLMRIS-LAUNCH-TEMPLATE-SPOT" --query "LaunchTemplates[0].LaunchTemplateId" --output text)
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID"
        LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $LAUNCH_TEMPLATE_ID --query "max_by(LaunchTemplateVersions, &VersionNumber).VersionNumber" --output text)
        echo "LATEST_VERSION=$LATEST_VERSION"
        aws ec2 create-launch-template-version --launch-template-id $LAUNCH_TEMPLATE_ID --version-description "New AMI version" --source-versio
